# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14wWBbxG34RkXXstOAXd6lWdpCJ34Bplr
"""

import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
import matplotlib.pyplot as plt
from google.colab import files

SIZE = 224

# Датасэт, название датасэтаб на какие части его делим (100% идет на тренировку нейросети)
train, _ = tfds.load('cats_vs_dogs', split=['train[:100%]'], with_info=True, as_supervised=True)
# 'image': Image(shape=(None, None, 3), dtype=tf.uint8), - 3 количество цветов (red, green, blue), None,None -разрешение (None может означать что картинки в разном ращрешении)
#  'train': 23262, - количество загруженных картинок
# 1738 corrupted images - поврежденные картинки

# for img, label in train[0].take(10):
#   plt.figure()
#   plt.imshow(img)
#   print(label)

def resize_image(img, label):
  img=tf.cast(img, tf.float32)
  img=tf.image.resize(img, (SIZE, SIZE)) # изменим на фиксированный размер
  img=img/255.0 # поделим значения пикселей в картинках, для удобства распознавания нейросети
  return img,label

train_resized=train[0].map(resize_image) # применение функции к текущим изображениям
traing_batches=train_resized.shuffle(1000).batch(16) # разбить данные на части, чтобы поместить в память компьютера

base_layers=tf.keras.applications.MobileNetV2(input_shape=(SIZE,SIZE,3), include_top=False)
base_layers.trainable=False

# В model хранитсся нейросеть
# ts.keras.Seqential функция для последовательного объявления слоев
model = tf.keras.Sequential([
                             base_layers,
                             GlobalAveragePooling2D(), # уменьшает картинку и усредняет значения фич
                             Dropout(0.2), # 20% нейронов будут случайно выключаться нужно чтобы нейросеть пыталась найти общие фичи а не заучивала наизусть
                             Dense(1)
])
model.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy(from_logits=True), metrics=['accuracy'])

#  данные на которых обучаем, количество epoh - сколько раз пройдется нейросетка по данным
model.fit(traing_batches, epochs=1)

files.upload()

# # преобразования над изображением для приведения к общему виду
# img=load_img('1.jpg')
# img_array=img_to_array(img)
# img_resized, _ = resize_image(img_array, _)
# img_expended = np.expand_dims(img_resized, axis=0)
# model.predict(img_expended) # предскажет что же изображено

# для анализа многих изображений
for i in range(3):
  img=load_img("%s.jpg"%i)
  img_array=img_to_array(img)
  img_resized, _ = resize_image(img_array, _)
  img_expended = np.expand_dims(img_resized, axis=0)
  prediction=model.predict(img_expended)[0][0]
  pred_label='Cat' if prediction<0.5 else 'Dog'
  plt.figure()
  plt.imshow(img)
  plt.title(f'{pred_label} {prediction}')